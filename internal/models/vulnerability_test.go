package models

import (
	"testing"
)

func TestVulnerabilityCreation(t *testing.T) {
	vuln := Vulnerability{
		Title:       "Test Vulnerability",
		Description: "This is a test vulnerability",
		Severity:    High,
		Category:    CategoryInjection,
		URL:         "http://example.com/test",
		Remediation: "Fix the vulnerability",
	}

	if vuln.Title != "Test Vulnerability" {
		t.Errorf("Expected title 'Test Vulnerability', got '%s'", vuln.Title)
	}
	if vuln.Description != "This is a test vulnerability" {
		t.Errorf("Expected description 'This is a test vulnerability', got '%s'", vuln.Description)
	}
	if vuln.Severity != High {
		t.Errorf("Expected severity High, got %s", vuln.Severity)
	}
	if vuln.Category != CategoryInjection {
		t.Errorf("Expected category CategoryInjection, got %s", vuln.Category)
	}
	if vuln.URL != "http://example.com/test" {
		t.Errorf("Expected URL 'http://example.com/test', got '%s'", vuln.URL)
	}
	if vuln.Remediation != "Fix the vulnerability" {
		t.Errorf("Expected remediation 'Fix the vulnerability', got '%s'", vuln.Remediation)
	}
}

func TestScanResultCreation(t *testing.T) {
	result := ScanResult{
		Target:    "http://example.com",
		Timestamp: "2024-01-01T00:00:00Z",
		Summary:   make(map[OWASPCategory]int),
		SeverityCount: map[SeverityLevel]int{
			High:   1,
			Medium: 2,
			Low:    3,
		},
	}

	if result.Target != "http://example.com" {
		t.Errorf("Expected target 'http://example.com', got '%s'", result.Target)
	}
	if result.Timestamp != "2024-01-01T00:00:00Z" {
		t.Errorf("Expected timestamp '2024-01-01T00:00:00Z', got '%s'", result.Timestamp)
	}
	if result.Summary == nil {
		t.Error("Expected Summary map to be initialized")
	}
	if result.SeverityCount[High] != 1 {
		t.Errorf("Expected 1 high severity vulnerability, got %d", result.SeverityCount[High])
	}
	if result.SeverityCount[Medium] != 2 {
		t.Errorf("Expected 2 medium severity vulnerabilities, got %d", result.SeverityCount[Medium])
	}
	if result.SeverityCount[Low] != 3 {
		t.Errorf("Expected 3 low severity vulnerabilities, got %d", result.SeverityCount[Low])
	}
}

func TestVulnerabilitySeverity(t *testing.T) {
	tests := []struct {
		name     string
		severity SeverityLevel
		want     string
	}{
		{"Critical", Critical, "Critical"},
		{"High", High, "High"},
		{"Medium", Medium, "Medium"},
		{"Low", Low, "Low"},
		{"Info", Info, "Info"},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if string(tt.severity) != tt.want {
				t.Errorf("Expected severity %s, got %s", tt.want, tt.severity)
			}
		})
	}
}

func TestOWASPCategory(t *testing.T) {
	tests := []struct {
		name     string
		category OWASPCategory
		want     string
	}{
		{"Injection", CategoryInjection, "A3: Injection"},
		{"BrokenAuth", CategoryBrokenAccessControl, "A1: Broken Access Control"},
		{"SensitiveData", CategoryCryptographicFailures, "A2: Cryptographic Failures"},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if string(tt.category) != tt.want {
				t.Errorf("Expected category %s, got %s", tt.want, tt.category)
			}
		})
	}
}
